scilla_version 0
import IntUtils

library DecentralisedIndex

let zero = Uint128 0
let one = Uint128 1
let two = Uint32 2
let yes = True
let no = False

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let two_msgs =
fun (msg1 : Message) =>
fun (msg2 : Message) =>
  let msgs_tmp = one_msg msg2 in
  Cons {Message} msg1 msgs_tmp

let mk_error_event =
  fun (err_code : Int32) =>
    { _exception : "Error" ; err_code : err_code }

let get_val =
  fun (some_val: Option Uint128) =>
     match some_val with
        | Some val => val
        | None => zero
     end

let insufficient_access_err_code = Int32 -1
let tokens_not_available = Int32 -2 
let sender_not_same_as_reciever = Int32 -3
let price_not_match_emission_algorithm = Int32 -4

contract DecentralisedIndexFund (owner: ByStr20, init_supply: Uint128)

field nfts : Map ByStr20 (Map Uint256 Bool) = Emp ByStr20 (Map Uint256 Bool)
field nftamounts: Map ByStr20 (Map Uint256 Uint128) = Emp ByStr20 (Map Uint256 Uint128)

field owners : Map ByStr20 Uint128 = Emp ByStr20 Uint128
field total_supply : Uint128 = init_supply
field contract_owner : ByStr20 = owner
field net_value: Uint128 = zero

procedure SenderRecieverSame(address: ByStr20)
  is_equal = builtin eq address _sender;
  match is_equal with
    | True =>
      e = mk_error_event sender_not_same_as_reciever;
      throw e
    | False =>
  end
end

procedure CheckOwnership(address: ByStr20)
  is_sender = builtin eq _sender address;
  match is_sender with 
    | False =>
      e = mk_error_event insufficient_access_err_code;
      throw e
    | True =>
  end
end

procedure TokenUnavailable(tokens: Uint128)
    supply <- total_supply;
    is_greater = builtin lt supply tokens;
    match is_greater with 
        | True =>
          e = mk_error_event tokens_not_available;
          throw e
        | False =>
    end
end

procedure IfSufficientBalance(to: ByStr20, amount: Uint128)
    current_balance <- owners[_sender];
    match current_balance with
      | Some val =>
        is_greater = builtin lt val amount;
        match is_greater with
          | True =>
            e = mk_error_event tokens_not_available;
            throw e
          | False =>
        end
      | None =>
        e = mk_error_event tokens_not_available;
        throw e
    end
end

procedure MoveBalance(to: ByStr20, amount: Uint128)
  sender_old_balance <- owners[_sender];
  reciever_old_balance <- owners[to];
  match sender_old_balance with
    |Some s_old_val =>
      s_new_val = builtin sub s_old_val amount;
      owners[_sender] := s_new_val;
      match reciever_old_balance with
       |Some r_old_val =>
        r_new_val = builtin add r_old_val amount;  
        owners[to] := r_new_val
       |None =>
        owners[to] := amount
       end
    |None =>
  end
end

procedure AddTokens(tokens: Uint128)
  sender_old_balance <- owners[_sender];
  match sender_old_balance with 
  | Some old_val =>
    new_val = builtin add old_val tokens;
    owners[_sender] := new_val
  | None =>
    owners[_sender] := tokens
  end
end

procedure AuthorizedMint(recipient: ByStr20, amount: Uint128) 
  o_recipient_bal <- owners[recipient];
  bal = get_val o_recipient_bal;
  new_balance = builtin add amount bal;
  owners[recipient] := new_balance;
  current_total_supply <- total_supply;
  new_total_supply = builtin add current_total_supply amount;
  total_supply := new_total_supply;
  e = {_eventname: "Minted"; minter: _sender; recipient: recipient; amount: amount};
  event e
end

transition Mint(recipient: ByStr20, amount: Uint128)
  owner_addr <- contract_owner;
  CheckOwnership owner_addr;
  AuthorizedMint recipient amount;
  msg_to_recipient = {_tag : "RecipientAcceptMint"; _recipient : recipient; _amount : zero; 
                      minter : _sender; recipient : recipient; amount : amount};
  msg_to_sender = {_tag : "MintSuccessCallBack"; _recipient : _sender; _amount : zero; 
                      minter : _sender; recipient : recipient; amount : amount};
  msgs = two_msgs msg_to_recipient msg_to_sender;
  send msgs
end

transition BuyTokens(tokens: Uint128)
    supply <- total_supply;
    TokenUnavailable tokens;
    sold = builtin sub init_supply supply;
    price = builtin pow sold two;
    is_amount_correct =  uint128_ge _amount price;
    match is_amount_correct with
      | True => 
        accept;
        AddTokens tokens;
        new_token_supply = builtin sub supply tokens;
        total_supply := new_token_supply;
        e = {_eventname: "BuyTokens"; reciever: _sender; amount: tokens};
        event e;
        msg_to_sender = {_tag : "TransferSuccessCallBack"; _recipient : _sender; _amount : zero; 
        sender : _sender; tokens : tokens};
        msgs = one_msg msg_to_sender;
        send msgs
      | False =>
        e = mk_error_event price_not_match_emission_algorithm;
        throw e
    end
end

transition TransferTokens(to: ByStr20, amount: Uint128)
  SenderRecieverSame to;
  IfSufficientBalance to amount;
  MoveBalance to amount;
  e = {_eventname : "TransferSuccess"; sender : _sender; recipient : to; amount : amount};
  event e;
  msg_to_sender = {_tag: "TransferSuccessCallback"; _recipient: _sender; _amount: zero; amount: amount; to: to};
  msg_to_recipient = {_tag: "RecipientTransferSuccess"; _recipient: to; _amount: zero; amount: amount; sender: _sender};
  msgs = two_msgs msg_to_sender msg_to_recipient;
  send msgs

end

transition indexValue(address: ByStr20)
  balance <- owners[address];
  current_val <- net_value;

  match balance with
    | Some val =>
      e = {_eventname : "GetIndexInfo"; address: address; balance: val; total_value: current_val};
      event e
    | None =>
  end
end

transition fundValue()
  current_val <- net_value;
  e = {_eventname : "GetFundValue"; total_value: current_val};
  event e 
end


transition AddToDIF(contract_addr: ByStr20, token_id: Uint256, amount: Uint128)
  owner_addr <- contract_owner;
  current_val <- net_value;
  CheckOwnership owner_addr;
  nfts[contract_addr][token_id] := yes;
  nftamounts[contract_addr][token_id] := amount;
  tempval = builtin add current_val amount;
  net_value := tempval;
  e = {_eventname: "AddToDif"; from: contract_addr; token_id: token_id};
  event e
end

procedure upadateTempValue(contract_addr: ByStr20, token_id: Uint256)
  amount <- nftamounts[contract_addr][token_id];
  current_val <- net_value;
  match amount with
    | Some am =>
      tempval = builtin sub current_val am;
      net_value := tempval
    | None =>
  end
end
transition RemoveFromDIF(contract_addr: ByStr20, token_id: Uint256)
  owner_addr <- contract_owner;
  current_val <- net_value;
  upadateTempValue contract_addr token_id;
  CheckOwnership owner_addr;
  delete nfts[contract_addr][token_id];
  delete nftamounts[contract_addr][token_id];
  e = {_eventname: "RemoveFromDIF"; from: contract_addr; token_id: token_id};
  event e
end

transition RecipientAcceptTransferFrom(from: ByStr20, recipient: ByStr20, token_id: Uint256)
    nfts[_sender][token_id] := no
end
transition RecipientAcceptTransfer(from: ByStr20, recipient: ByStr20, token_id: Uint256)
    nfts[_sender][token_id] := no
end